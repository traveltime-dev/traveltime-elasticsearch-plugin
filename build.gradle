buildscript {
    repositories {
        gradlePluginPortal()
    }

    dependencies {
        classpath "io.freefair.gradle:lombok-plugin:6.4.1"
    }
}

apply plugin: 'java-library'

def common = project(':common')

configure(subprojects - common) {
    group = 'com.traveltime'

    repositories {
        maven {
            url = 'https://snapshots.elastic.co/maven/'
        }
        mavenCentral()
    }

    apply plugin: "io.freefair.lombok"

    apply plugin: 'java'

    compileJava {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    dependencies {
        implementation(common) {
            exclude group: 'org.apache.logging.log4j'
        }
        implementation('com.traveltime:traveltime-sdk-java:1.1.17') {
            exclude group: 'com.fasterxml.jackson.core'
            exclude group: 'org.locationtech.jts'
        }
        implementation group: 'com.google.guava', name: 'guava', version: '31.0.1-jre'
        implementation 'io.vavr:vavr:0.10.4'
        implementation group: 'it.unimi.dsi', name: 'fastutil', version: '8.5.6'
    }

    ext.revisions = { version, snapshot = true ->
        def base = (0..version).collect { it.toString() }
        if (snapshot)
            base + "${version + 1}-SNAPSHOT".toString()
        else
            base
    }

    ext.buildPlugin = { project, esVersion, esRevisions ->
        project.version = project.findProperty('tag') ?: "v0.2-SNAPSHOT"

        project.dependencies {
            compileOnly "org.elasticsearch:elasticsearch:${esVersion}.${esRevisions.findAll{ it.isInteger() }.max()}"
        }

        project.task("pluginZip")

        esRevisions.forEach { revision ->
            def realRevision = revision.replaceAll("-SNAPSHOT", "")

            project.task("makeProperties_${revision}", type: Copy) {
                from "src/universal/plugin-descriptor.properties"
                into "$buildDir/generated_${revision}"
                filter { line -> line.replaceAll('ES_VERSION', "${esVersion}.${realRevision}").replaceAll('PLUGIN_VERSION', "${version}") }
            }

            project.task("pluginZip_${revision}", dependsOn: [project.jar, "makeProperties_${revision}"], type: Zip) {
                archiveName rootProject.name + "_${project.version}_${esVersion}.${revision}.zip"
                setDestinationDirectory(rootProject.distsDirectory)
                from project.jar

                from configurations.runtimeClasspath
                from "$buildDir/generated_${revision}" include '*'
                from "${common.projectDir.path}/src/universal/plugin-security.policy"
            }

            project.pluginZip.dependsOn("pluginZip_${revision}")
        }

        task("Dockerfile", type: Copy) {
            from "${common.projectDir.path}/src/universal/Dockerfile.template"
            into "${buildDir}/docker"
            rename { "Dockerfile" }
            filter { line -> line.replaceAll('PLUGIN_VERSION', "${version}").replaceAll('ES_VERSION', "${esVersion}") }
        }

        task("dockerignore", type: Copy) {
            from "${common.projectDir.path}/src/universal/.dockerignore.template"
            into "${buildDir}/docker"
            rename { ".dockerignore" }
            filter { line -> line.replaceAll('PLUGIN_VERSION', "${version}").replaceAll('ES_VERSION', "${esVersion}") }
        }

        task("testZip", type: Copy, dependsOn: "pluginZip_0") {
            from rootProject.distsDirectory.file("${rootProject.name + "_${project.version}_${esVersion}.0.zip"}").get()
            into project.distsDirectory
        }

        task("wait_script", type: Copy) {
            from "${common.projectDir.path}/src/universal/wait-for-startup.sh"
            into project.distsDirectory
        }

        task("test_data", type: Copy) {
            from "${common.projectDir.path}/src/universal/part0"
            into project.distsDirectory
        }

        task("load_script", type: Copy) {
            from "${common.projectDir.path}/src/universal/load-data.sh"
            into project.distsDirectory
        }

        task("mock_server", type: Copy) {
            from "${common.projectDir.path}/bin/mock-proto-server"
            into project.distsDirectory
        }

        def imageName = "${project.version.toString().toLowerCase()}_${esVersion}-test"

        def dockerBuildTest = task("dockerBuildTest", type: Exec, dependsOn: ["Dockerfile", "dockerignore", "testZip", "wait_script", "test_data", "load_script", "mock_server"]) {
            environment "DOCKER_BUILDKIT", "1"
            commandLine "docker", "build", ".", "-f", "${buildDir}/docker/Dockerfile", "-t", imageName
        }

        task("dockerTest", type: Exec, dependsOn: ["dockerBuildTest"] ) {
            environment "IMAGE_NAME", imageName
            workingDir project.distsDirectory
            commandLine "bash", "${common.projectDir.path}/src/universal/run-tests.sh"
        }

        (1..4).each { testCase ->
            def request = task("test_case_${testCase}_request", type:Copy) {
                from "${common.projectDir.path}/src/universal/test_case_${testCase}.json"
                into project.distsDirectory
            }

            def expected = task("test_case_${testCase}_expected", type:Copy) {
                from "${common.projectDir.path}/src/universal/expected_results_${testCase}"
                into project.distsDirectory
            }

            dockerBuildTest.dependsOn(request)
            dockerBuildTest.dependsOn(expected)
        }
    }
}

